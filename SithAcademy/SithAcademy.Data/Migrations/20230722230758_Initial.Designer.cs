// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SithAcademy.Data;

#nullable disable

namespace SithAcademy.Data.Migrations
{
    [DbContext(typeof(AcademyDbContext))]
    [Migration("20230722230758_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Academy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID of the academy");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Brief description of the academy");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL of the image that will be used to visualize the academy");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Boolean showing whether or not the academy is accessible for new acolytes");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasComment("ID of the academy's location");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Title of the academy");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.AcademyAcolyte", b =>
                {
                    b.Property<int>("AcademyId")
                        .HasColumnType("int")
                        .HasComment("ID of the academy in which the acolyte is assigned to");

                    b.Property<Guid>("AcolyteId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the acolyte");

                    b.HasKey("AcademyId", "AcolyteId");

                    b.HasIndex("AcolyteId");

                    b.ToTable("AcademiesAcolytes");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.AcademyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasComment("ID of the location on which the acolyte is currently located");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Homework", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the homework");

                    b.Property<Guid>("AcolyteId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the acolyte to which the homework belongs");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Content of the homework");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Boolean showing whether or not the homework has been approved");

                    b.Property<Guid>("TrialId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the trial for which the homework is");

                    b.HasKey("Id");

                    b.HasIndex("AcolyteId");

                    b.HasIndex("TrialId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ID of the location");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Brief description of the location");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL of the image that will be used to visualize the location");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Boolean showing whether or not the location is accessible for new acolytes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the location");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Overseer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the overseer");

                    b.Property<int>("AcademyId")
                        .HasColumnType("int")
                        .HasComment("ID of the academy in which the overseer is assigned to");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Title of the overseer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the existing user that is also an overseer");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.HasIndex("UserId");

                    b.ToTable("Overseers");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the resource");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Boolean showing whether or not the resource should be displayed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the resource");

                    b.Property<Guid>("TrialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL for the resource's location");

                    b.HasKey("Id");

                    b.HasIndex("TrialId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Trial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the trial");

                    b.Property<int>("AcademyId")
                        .HasColumnType("int")
                        .HasComment("ID of the academy which hosts the trial");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the trial");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Boolean showing whether or not the trial can be participated in");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Title of the trial");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Trials");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.TrialAcolyte", b =>
                {
                    b.Property<Guid>("TrialId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the trial which the acolyte must complete");

                    b.Property<Guid>("AcolyteId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the acolyte");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Boolean showing whether or not the acolyte has an approved homework for the trial");

                    b.HasKey("TrialId", "AcolyteId");

                    b.HasIndex("AcolyteId");

                    b.ToTable("TrialsAcolytes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.AcademyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.AcademyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SithAcademy.Data.Models.AcademyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.AcademyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Academy", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.Location", "Location")
                        .WithMany("Academies")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.AcademyAcolyte", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.Academy", "Academy")
                        .WithMany("Acolytes")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SithAcademy.Data.Models.AcademyUser", "Acolyte")
                        .WithMany("JoinedAcademies")
                        .HasForeignKey("AcolyteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("Acolyte");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.AcademyUser", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.Location", "Location")
                        .WithMany("Acolytes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Homework", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.AcademyUser", "Acolyte")
                        .WithMany("PublishedHomeworks")
                        .HasForeignKey("AcolyteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SithAcademy.Data.Models.Trial", "Trial")
                        .WithMany("PublishedHomeworks")
                        .HasForeignKey("TrialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Acolyte");

                    b.Navigation("Trial");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Overseer", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.Academy", "Academy")
                        .WithMany("Overseers")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SithAcademy.Data.Models.AcademyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Resource", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.Trial", "Trial")
                        .WithMany("Resources")
                        .HasForeignKey("TrialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trial");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Trial", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.Academy", "Academy")
                        .WithMany("Trials")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.TrialAcolyte", b =>
                {
                    b.HasOne("SithAcademy.Data.Models.AcademyUser", "Acolyte")
                        .WithMany("AssignedTrials")
                        .HasForeignKey("AcolyteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SithAcademy.Data.Models.Trial", "Trial")
                        .WithMany("AssignedAcolytes")
                        .HasForeignKey("TrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acolyte");

                    b.Navigation("Trial");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Academy", b =>
                {
                    b.Navigation("Acolytes");

                    b.Navigation("Overseers");

                    b.Navigation("Trials");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.AcademyUser", b =>
                {
                    b.Navigation("AssignedTrials");

                    b.Navigation("JoinedAcademies");

                    b.Navigation("PublishedHomeworks");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Location", b =>
                {
                    b.Navigation("Academies");

                    b.Navigation("Acolytes");
                });

            modelBuilder.Entity("SithAcademy.Data.Models.Trial", b =>
                {
                    b.Navigation("AssignedAcolytes");

                    b.Navigation("PublishedHomeworks");

                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
